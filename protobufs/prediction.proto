syntax = "proto3";

package prediction;
import "google/protobuf/timestamp.proto";


//Raw Input passed to the model
//maintainer: xs, sx
message input {
    string inputType = 1;
    string inputStream = 2;
}

//Raw output returned from the model
//maintainer: xs, sx
message output {
    string outputType = 1;
    string outputStream = 2;

}

//The message passed between proxies.
//maintainer: xs.
message request{
    input input_ = 1;

    string src_uri = 2;
    uint32 seq = 3;
    uint32 req_id = 4;

    google.protobuf.Timestamp timestamp = 5;
}


//A default return value
//maintainer: xs, sx
message response {
    uint32 seq = 1;
}

//The info of proxy used for recovery.
//maintainer: xs, sx
message proxy_info {
    string ip = 1;
    uint32 port = 2;
    bool stateful = 3;
    bool is_primary = 4;

    uint32 seq = 5;
}

//The return value (info needed) while reporting a node's failure to the manager.
//maintainer: xs, sx
message failure_reply{
    proxy_info new_proxy = 1;

    repeated proxy_info successors =2;
    repeated proxy_info predecessors = 3;

    bool is_primary = 4;
}

//The recovery req between proxies .
//maintainer: xs.
message recovery_req {
    proxy_info failed_proxy = 1;
    proxy_info new_proxy = 2;
    uint32 start_seq = 3;
    bool is_stateful = 4;
    bool is_primary = 5;
}

//The recovery req between proxies .
//maintainer: xs.
message successor_prepare_reply {
    uint32 seq = 1;
}

//The recovery req between proxies .
//maintainer: xs.
message ping_req{

}

//The recovery req between proxies .
//maintainer: xs.
message ping_reply{
    uint32 status = 1; //enum representing a status status

    bool stateful = 2;

    bool is_primary = 3;
}

//The recovery req between proxies .
//maintainer: xs.
message successor_prepare_req{
    proxy_info failed_proxy = 1;
    proxy_info new_proxy = 2;
}



//The recovery req between proxies .
//maintainer: xs.
message proxy_group {
    repeated proxy_info downstreams = 1;
    bool stateful = 2;

}


//The recovery req between proxies .
//maintainer: xs.
message new_proxy_recover_req{
    repeated proxy_info predecessors = 1;
    repeated proxy_group down_groups = 2;
    uint32 start_seq = 3;
}



message modelinfo {
    string modelName = 1;
    uint32 modelPort = 2;
    uint32 modelId = 3;
}

message dag{
    string dag_ = 1;
}

service ProxyServer{

    /*
    A proxy calls this method on a downstream proxy to pass its model output as
    request to the downstream.

    Client: Upstream Proxy || The SMR leader.
    Server: Downstream Proxy.

    Input: The passed request. (currently not batched)
    Returns: A simple ACK.
    */
    rpc downstream (request) returns(response){}

    /*
    Failure Recovery RPCs
    */
    rpc prepare_recover_successor (successor_prepare_req) returns (successor_prepare_reply){}
    rpc prepare_recover_predecessor (recovery_req) returns (response) {}
    rpc commit_recover_successor(recovery_req) returns (response) {}
    rpc commit_recover_predecessor(recovery_req) returns (response) {}
    rpc recover_new_proxy (new_proxy_recover_req) returns (response) {}
    rpc promote_primary (new_proxy_recover_req) returns (response) {}

    /*
    An predecessor call this to appoint a stateful downstream replica as primary.
    */
    rpc set_primary(proxy_info) returns (response) {}
    rpc ping(ping_req) returns (ping_reply) {}

    //Called by manager
    rpc SetModel(modelinfo) returns (response) {}
    rpc SetDAG(dag) returns (response) {}

}

service ModelServer{

    //An proxy calls this rpc on the model
    //Client: Proxy.ModelConn
    //Server: Model.
    rpc predict (input) returns (output){}

    rpc ping(ping_req) returns (response) {}

//    rpc batch_predict (request_batch) returns (reply_batch){}
}
